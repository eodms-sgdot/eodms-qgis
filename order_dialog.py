# -*- coding: utf-8 -*-
"""
/***************************************************************************
 EodmsDialog
                                 A QGIS plugin
 A plugin used to access the EODMS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-05-19
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Kevin Ballantyne/Natural Resources Canada
        email                : eodms-sgdot@nrcan-rncan.gc.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""



import os
from eodms_rapi import EODMSRAPI

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from PyQt5 import QtGui
from PyQt5.QtWidgets import QFileDialog

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'order_dialog_base.ui'))


class OrderDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None, eodms=None):
        """Constructor."""
        super(OrderDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.eodms = eodms

        # self.butBrowse.clicked.connect(self.showBrowserDialog)

        self.cboPriority.addItems(['LOW', 'MEDIUM', 'HIGH'])
        self.cboPriority.setCurrentIndex(1)

        # self.eodms.post_message(f"self.eodms.order_lst: {self.eodms.order_lst}")

        if len(self.eodms.order_lst) > 0:

            self.tblImages.setHorizontalHeaderLabels(['Record Id',
                                                      'Collection'])
            self.tblImages.setRowCount(len(self.eodms.order_lst))
            self.tblImages.setColumnCount(2)

            # img_lst = []
            for idx, feat in enumerate(self.eodms.order_lst):
                record_id = feat['RECORD_ID']
                coll_id = feat['COLLECTION_ID']
                # img_lst.append([record_id, coll_id])
                self.tblImages.setItem(idx, 0,
                                       QtWidgets.QTableWidgetItem(
                                           record_id))
                self.tblImages.setItem(idx, 1,
                                       QtWidgets.QTableWidgetItem(
                                           coll_id))

            self.tblImages.horizontalHeader().setStretchLastSection(True)
            self.tblImages.horizontalHeader().setSectionResizeMode(
                QtWidgets.QHeaderView.Stretch)

            #     items = []
            #     for rec in sorted(img_lst):
            #         items.append(QtGui.QStandardItem(rec[0]))
            #         items.append(QtGui.QStandardItem(rec[1]))
            #
            #     model.appendRow(items)
            #
            # self.colImages.setModel(model)

    def showBrowserDialog(self):

        folder = QFileDialog.getExistingDirectory(self, self.eodms.tr(
            "Open Directory"), self.eodms.download_folder,
                                                  QFileDialog.ShowDirsOnly |
                                              QFileDialog.DontResolveSymlinks)

        if folder:
            self.txtFolder.setText(folder)