# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Eodms
                                 A QGIS plugin
 A plugin used to access the EODMS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-05-19
        git sha              : $Format:%H$
        copyright            : Copyright (c) His Majesty the King in Right of 
                                Canada, as represented by the Minister of 
                                Natural Resources, 2023.
        email                : eodms-sgdot@nrcan-rncan.gc.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__title__ = 'EODMS QGIS Plugin'
__author__ = 'Kevin Ballantyne'
__copyright__ = 'Copyright (c) His Majesty the King in Right of Canada, ' \
                'as represented by the Minister of Natural Resources, 2023.'
__license__ = 'MIT License'
# __description__ = ''
__version__ = '0.1'
__maintainer__ = 'Kevin Ballantyne'
__email__ = 'kevin.ballantyne@nrcan-rncan.gc.ca'

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QPoint
from qgis.PyQt.QtGui import QIcon, QColor
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox, QToolBar, \
    QLabel, QWidget, QVBoxLayout
from qgis.core import *
from qgis import processing
from xml.etree import ElementTree
import xml
import random
import urllib.request
import base64

# Initialize Qt resources from file resources.py
from . import resources
from . import config_util
# import resources

# Import the code for the dialog
# from .eodms_dialog import EodmsDialog
from .search_dialog import SearchDialog
from .settings_dialog import SettingsDialog
from .order_dialog import OrderDialog
from .download_dialog import DownloadDialog
import os.path
from eodms_rapi import EODMSRAPI
from osgeo import ogr
import json
import datetime

from PyQt5.QtCore import Qt, QVariant

MESSAGE_CATEGORY = 'RAPI Tasks'

class DownloadTask(QgsTask):

    def __init__(self, desc, eodms):
        super().__init__(desc, QgsTask.CanCancel)

        self.eodms = eodms
        self.rapi = eodms.rapi
        self.desc = desc
        self.exception = None
        self.download_res = None

    def run(self):

        self.eodms.post_message(f'Started task {self.desc}',
                                tag=MESSAGE_CATEGORY)

        self.eodms.post_message(f'Downloading {len(self.eodms.download_items)}'
                                f' images.',
                                tag=MESSAGE_CATEGORY)

        self.download_res = self.eodms.rapi.download(self.eodms.download_items,
                                                     self.eodms.download_folder,
                                                     show_progress=False)

        out_str = ''
        for item in self.download_res:
            rec_id = item.get('recordId')
            dl_paths = item.get('downloadPaths')
            for p in dl_paths:
                download_loc = p.get('local_destination')
                out_str += f"\n  Sequence ID {rec_id}: {download_loc}"

        self.eodms.post_message(f'Task {self.desc} complete. '
                                f'{out_str}',
                                tag=MESSAGE_CATEGORY)

        return True

    def finished(self, result):
        """This method is automatically called when self.run returns.
        result is the return value from self.run.
        This function is automatically called when the task has completed (
        successfully or otherwise). You just implement finished() to do
        whatever
        follow up stuff should happen after the task is complete. finished is
        always called from the main thread, so it's safe to do GUI
        operations and raise Python exceptions here.
        """

        if result:
            self.eodms.post_message(
                f'Task "{self.desc}" completed', tag=MESSAGE_CATEGORY,
                level=Qgis.Success)
        else:
            if self.exception is None:
                self.eodms.post_message(
                    f'Task "{self.desc}" not successful but '
                    f'without exception (probably the task was manually '
                    f'canceled by the user)', tag=MESSAGE_CATEGORY,
                    level=Qgis.Warning)
            else:
                self.eodms.post_message(
                    f'Task "{self.desc}" Exception: {self.exception}',
                    tag=MESSAGE_CATEGORY, level=Qgis.Critical)
                raise self.exception

        self.eodms.post_message("Downloaded successfully.")

    def cancel(self):
        self.eodms.post_message(f'Task "{self.description}" was cancelled',
                                tag=MESSAGE_CATEGORY, level=Qgis.Info)
        super().cancel()

class OrderTask(QgsTask):

    def __init__(self, desc, eodms, priority='Medium'):
        super().__init__(desc, QgsTask.CanCancel)

        self.eodms = eodms
        self.rapi = eodms.rapi
        self.desc = desc
        self.exception = None
        self.priority = priority

    def run(self):

        self.eodms.post_message(f'Started task {self.desc}',
                                tag=MESSAGE_CATEGORY)

        if self.eodms.rapi_results is None:
            rapi_results = []
            for o in self.eodms.order_lst:
                rec_id = o['RECORD_ID']
                coll_id = o['COLLECTION_ID']
                rec = self.eodms.rapi.get_record(coll_id, rec_id)
                rapi_results.append(rec)
        else:
            rapi_results = self.eodms.rapi_results

        res = []
        if isinstance(rapi_results, dict):
            features = rapi_results.get('features')
        else:
            features = rapi_results

        order_rec_ids = [s['RECORD_ID'] for s in self.eodms.order_lst]
        # self.eodms.post_message(order_rec_ids, tag=MESSAGE_CATEGORY)

        for feat in features:
            if 'properties' in feat.keys():
                props = feat.get('properties')
            else:
                props = feat
            rec_id = props.get('recordId')
            if rec_id is None:
                rec_id = props.get('RECORD_ID')
            if rec_id in order_rec_ids:
                res.append(props)

        if len(res) == 0:
            return False

        self.eodms.post_message(f"res: {res}")

        order_res = self.rapi.order(res, self.priority)

        return True

    def finished(self, result):
        """This method is automatically called when self.run returns.
        result is the return value from self.run.
        This function is automatically called when the task has completed (
        successfully or otherwise). You just implement finished() to do
        whatever
        follow up stuff should happen after the task is complete. finished is
        always called from the main thread, so it's safe to do GUI
        operations and raise Python exceptions here.
        """

        if result:
            self.eodms.post_message(
                f'Task "{self.desc}" completed', tag=MESSAGE_CATEGORY,
                level=Qgis.Success)
            self.eodms.show_message("Order submitted successfully",
                                    "Order Successful")

            self.eodms.post_message("Order submitted successfully.")
        else:
            if self.exception is None:
                self.eodms.post_message(
                    f'Task "{self.desc}" not successful but '
                    f'without exception (probably the task was manually '
                    f'canceled by the user)', tag=MESSAGE_CATEGORY,
                    level=Qgis.Warning)
            else:
                self.eodms.post_message(
                    f'Task "{self.desc}" Exception: {self.exception}',
                    tag=MESSAGE_CATEGORY, level=Qgis.Critical)
                raise self.exception
            self.eodms.show_message("Order submission unsuccessful.")

            self.eodms.post_message("Order submission unsuccessful.")

    def cancel(self):
        self.eodms.post_message(f'Task "{self.description}" was cancelled',
                                tag=MESSAGE_CATEGORY, level=Qgis.Info)
        super().cancel()

class SearchTask(QgsTask):

    def __init__(self, desc, eodms, params):
        super().__init__(desc, QgsTask.CanCancel)

        self.eodms = eodms
        self.rapi = eodms.rapi
        self.params = params
        self.desc = desc
        self.exception = None
        self.rapi_results = []

    def run(self):

        self.eodms.post_message(f'Started task {self.desc}',
                                tag=MESSAGE_CATEGORY)

        self.rapi.clear_results()
        # self.eodms.post_message(f"self.params: {self.params}")
        for coll_id, values in self.params.items():
            # self.eodms.post_message(f"  coll_id: {coll_id}")
            filters = values.get('filters')
            features = values.get('features')
            dates = values.get('dates')
            # dates = self.eodms.parse_dates(dates)
            self.eodms.post_message(f"dates: {dates}")
            max_res = values.get('max_res')
            self.eodms.post_message(f"Parameter list:\n"
                                    f"  Collection: {coll_id}\n"
                                    f"  Features: {features}\n"
                                    f"  Filters: {filters}\n"
                                    f"  Dates: {dates}\n"
                                    f"  Maximum Results: {max_res}",
                                    tag=MESSAGE_CATEGORY)
            self.rapi.search(coll_id, filters, features, dates,
                             max_results=max_res)

        self.rapi.set_field_convention('upper')
        self.rapi_results = self.rapi.get_results('geojson',
                                                  show_progress=False)

        # self.rapi_results = self.rapi.get_results()

        # QgsMessageLog.logMessage(f"RAPI URL: {self.rapi.get_rapi_url()}")

        self.eodms.post_message(f"RAPI URL: {self.rapi.get_rapi_url()}",
                                tag=MESSAGE_CATEGORY)

        return True

    def finished(self, result):
        """This method is automatically called when self.run returns.
        result is the return value from self.run.
        This function is automatically called when the task has completed (
        successfully or otherwise). You just implement finished() to do
        whatever
        follow up stuff should happen after the task is complete. finished is
        always called from the main thread, so it's safe to do GUI
        operations and raise Python exceptions here.
        """

        if result:
            self.eodms.post_message(f'Task "{self.desc}" completed',
                                    tag=MESSAGE_CATEGORY, level=Qgis.Success)
        else:
            if self.exception is None:
                self.eodms.post_message(
                    f'Task "{self.desc}" not successful but '
                    f'without exception (probably the task was manually '
                    f'canceled by the user)',
                    tag=MESSAGE_CATEGORY, level=Qgis.Warning)
            else:
                self.eodms.post_message(
                    f'Task "{self.desc}" Exception: {self.exception}',
                    tag=MESSAGE_CATEGORY, level=Qgis.Critical)
                raise self.exception

        self.eodms.post_message("Search task complete.", tag=MESSAGE_CATEGORY)

    def cancel(self):
        self.eodms.post_message(f'Task "{self.description}" was cancelled',
                                tag=MESSAGE_CATEGORY, level=Qgis.Info)
        super().cancel()

class ThumbTask(QgsTask):

    def __init__(self, desc, eodms):
        super().__init__(desc, QgsTask.CanCancel)

        self.eodms = eodms
        self.imgs = eodms.img_lst
        self.desc = desc
        self.exception = None

    def run(self):

        self.eodms.post_message(f'Started task {self.desc}',
                                tag=MESSAGE_CATEGORY)

        proj = QgsProject.instance()
        tree_root = proj.layerTreeRoot()

        group_name = "EODMS Thumbnails"
        # group = self.eodms.get_group(group_name)

        group = tree_root.findGroup(group_name)

        if group is None:
            group = tree_root.insertGroup(0, group_name)

        for idx, img in enumerate(self.imgs):

            # fld_idx = img.fields().indexOf('THUMBNAIL_URL')
            # self.eodms.post_message(f"img_lst: {img.fields().toList()}",
            #                     tag=MESSAGE_CATEGORY)
            # self.show_message(f"thumbnail: {img['THUMBNAIL_URL']}")

            rec_id = img['RECORD_ID']
            thumb_url = img['THUMBNAIL_URL']
            layer_name = f"Sequence ID {rec_id}"
            # thumb_fn = f"C:\\TEMP\\Sequence_ID_{rec_id}.jpg"
            # urllib.request.urlretrieve(thumb_url, thumb_fn)

            geom = img.geometry()
            poly = geom.asPolygon()

            tmp_layer = QgsRasterLayer(thumb_url, layer_name)
            tmp_layer.setCrs(QgsCoordinateReferenceSystem("EPSG:4326"))
            width = tmp_layer.width()
            height = tmp_layer.height()

            gcps = []
            gcps.append(f"0 0 {poly[0][0].x()} {poly[0][0].y()} 0")
            gcps.append(f"0 {height} {poly[0][1].x()} {poly[0][1].y()} 0")
            gcps.append(f"{width} {height} {poly[0][2].x()} {poly[0][2].y()} 0")
            gcps.append(f"{width} 0 {poly[0][3].x()} {poly[0][3].y()} 0")
            extra = ' -gcp '.join(gcps)

            proc_res = processing.run("gdal:translate", {
                'INPUT': tmp_layer,
                'TARGET_CRS': 'EPSG:4326',
                'NODATA': 0,
                'EXTRA': f'-gcp {extra}',
                'OUTPUT': 'TEMPORARY_OUTPUT'})

            rast_lyr = QgsRasterLayer(proc_res['OUTPUT'], layer_name)

            # group.insertLayer(idx, rast_lyr)

            QgsProject.instance().addMapLayer(rast_lyr, False)
            group.insertLayer(idx, rast_lyr)
            # group.addLayer(rast_lyr)
            # group.insertChildNode(idx, rast_lyr)

        # tree_root.addChildNode(group)

        return True

    def finished(self, result):
        """This method is automatically called when self.run returns.
        result is the return value from self.run.
        This function is automatically called when the task has completed (
        successfully or otherwise). You just implement finished() to do
        whatever
        follow up stuff should happen after the task is complete. finished is
        always called from the main thread, so it's safe to do GUI
        operations and raise Python exceptions here.
        """

        if result:
            self.eodms.post_message(f'Task "{self.desc}" completed',
                                    tag=MESSAGE_CATEGORY, level=Qgis.Success)
        else:
            if self.exception is None:
                self.eodms.post_message(
                    f'Task "{self.desc}" not successful but '
                    f'without exception (probably the task was manually '
                    f'canceled by the user)',
                    tag=MESSAGE_CATEGORY, level=Qgis.Warning)
            else:
                self.eodms.post_message(
                    f'Task "{self.desc}" Exception: {self.exception}',
                    tag=MESSAGE_CATEGORY, level=Qgis.Critical)
                raise self.exception

        self.eodms.post_message("Search task complete.", tag=MESSAGE_CATEGORY)

    def cancel(self):
        self.eodms.post_message(f'Task "{self.description}" was cancelled',
                                tag=MESSAGE_CATEGORY, level=Qgis.Info)
        super().cancel()

class Eodms:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """

        # Save reference to the QGIS interface
        self.iface = iface

        # self.conf_file = os.path.join(os.sep, os.path.expanduser('~'), '.eodms',
        #                               'config.ini')
        self.conf_util = config_util.ConfigUtils(self)
        self.conf_util.import_config()

        self.post_message("EODMS Plugin, Version %s" % __version__)

        self.proj = QgsProject.instance()

        self.get_creds()
        iface.initializationCompleted.connect(self.get_creds)

        self.set_rapi()

        # Set paths here for easier changes
        self.resource_path = os.path.join(':', 'plugins', 'eodms', 'resources')
        self.post_message("self.resource_path: %s" % self.resource_path)
        self.search_path = f'{self.resource_path}/search.png'
        self.thumbnail_path = f'{self.resource_path}/thumbnail.png'
        self.settings_path = f'{self.resource_path}/settings.png'
        self.order_path = f'{self.resource_path}/order.png'
        self.download_path = f'{self.resource_path}/download.png'

        self.post_message(f"search_path: {self.search_path}")
        self.post_message(f"settings_path: {self.settings_path}")

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        # self.post_message(f"QSettings: {QSettings().value('locale/
        # userLocale')}")
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(self.plugin_dir, 'i18n',
                                   'Eodms_{}.qm'.format(locale))

        self.post_message(f"locale_path: {locale_path}")

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = {}
        self.menu = self.tr(u'&EODMS')
        self.toolbar = self.iface.addToolBar(self.tr(u'EODMS'))
        self.toolbar.setObjectName('EODMS_TB')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.order_lst = []
        self.rapi_results = None

        self.script_path = os.path.dirname(__file__)

        self.save_setting({'log': ''})
        self.save_setting({'attempts': '4'})
        self.save_setting({'query_timeout': '120.0'})
        self.save_setting({'order_timeout': '180.0'})

        self.download_folder = ''
        self.username = self.get_setting('username')
        self.password = self.get_setting('password')

        self.prev_srch_fn = f"{self.plugin_dir}\\previous_searches.json"

    def _save_search(self, search_params):
        
        searches = {}
        # Get the previous list of searches
        if os.path.exists(self.prev_srch_fn):
            with open(self.prev_srch_fn, 'r') as f:
                searches = json.load(f)

        now = datetime.datetime.now()
        dt_string = now.strftime("%Y%m%d_%H%M%S")
        searches[dt_string] = search_params

        # Check if new search is the same as any previous searches
        #   If so, don't add new search
        for k, srch in searches.items():
            if search_params == srch:
                return None

        # Keep list to 10 entries
        if len(searches.items()) > 10:
            (k := next(iter(searches)), searches.pop(k))

        with open(self.prev_srch_fn, "w") as outfile:
            json.dump(searches, outfile)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Eodms', message)

    def show_message(self, msg, title='Info', icon=QMessageBox.Information):

        msgBox = QMessageBox()
        msgBox.setIcon(icon)
        msgBox.setText(msg)
        msgBox.setWindowTitle(title)
        msgBox.setStandardButtons(QMessageBox.Ok)
        returnValue = msgBox.exec()

        return returnValue

    def get_group(self, group_name):

        proj = QgsProject.instance()
        root = proj.layerTreeRoot()
        group = root.findGroup(group_name)

        if group is None:
            group = QgsLayerTreeGroup(group_name)

        return group

    def show_thumbnails(self):

        self.rapi.reset()

        # Set list of orders from selection
        self.img_lst = self.get_selection()

        if len(self.img_lst) == 0:
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Warning)
            msgBox.setText("Please select the images for which you would "
                           "like to see thumbnails.")
            msgBox.setWindowTitle("No Selection")
            msgBox.setStandardButtons(QMessageBox.Ok)
            returnValue = msgBox.exec()
            return None

        self.post_message("Running RAPI download...")
        thumb_task = ThumbTask('Show Thumbnails', self)
        QgsApplication.taskManager().addTask(thumb_task)

        while thumb_task.status() not in [QgsTask.Complete, QgsTask.Terminated]:
            QCoreApplication.processEvents()
        while QgsApplication.taskManager().countActiveTasks() > 0:
            QCoreApplication.processEvents()

        # proj = QgsProject.instance()
        # for lyr_id, lyr in proj.mapLayers().items():
        #     self.iface.layerTreeView().refreshLayerSymbology(lyr_id)

        # Refresh the map canvas
        self.iface.mapCanvas().refresh()

            # layer_name = f"Sequence ID {rec_id}"
            # # layer = QgsRasterLayer(thumb_fn, layer_name)
            # layer = QgsRasterLayer(thumb_url, layer_name)
            # layer.setCrs(QgsCoordinateReferenceSystem("EPSG:4326"))
            # box = img.geometry().boundingBox()
            # xmin, xmax, ymin, ymax = box.xMinimum(), box.xMaximum(), \
            #                          box.yMinimum(), box.yMaximum()
            # box = QgsRectangle(xmin, ymin, xmax, ymax)
            # layer.setExtent(box)
            # QgsProject.instance().addMapLayer(layer)

    def parse_dates(self, in_dates):
        """
        Parses dates from the user into a format for the EODMSRAPI

        :param in_dates: A string containing either a time interval
                (24 hours, 3 months, etc.) or a range of dates
                (20200501-20210105T054540,...)
        :type  in_dates: str

        :return: A list of dictionaries containing keys 'start' and 'end'
                with the specific date ranges
                (ex: [{'start': '20200105_045034', 'end': '20210105_000000'}])
        :rtype: list
        """

        if in_dates is None or in_dates == '':
            return ''

        time_words = ['hour', 'day', 'week', 'month', 'year']

        if any(word in in_dates for word in time_words):
            dates = [in_dates]
        else:

            # Modify date for the EODMSRAPI object
            # print(f"in_dates: {in_dates}")
            date_ranges = in_dates.split(',')

            # print(f"date_ranges: {date_ranges}")

            dates = []
            start = ''
            end = ''
            for rng in date_ranges:
                start, end = rng.split('-')
                if start.lower().find('t') > -1:
                    start = start.lower().replace('t', '_')
                else:
                    start = f'{start}_000000'

                if end.lower().find('t') > -1:
                    end = end.lower().replace('t', '_')
                else:
                    end = f'{end}_000000'

                dates.append({'start': start, 'end': end})

        return dates

    def post_message(self, msg, **kwargs):
        """Post a message to the Log Messages panel.

        :param msg: The message sent to the Log Messages panel.
        :type msg: string
        """

        tag = 'Info'
        if 'tag' in kwargs.keys():
            tag = kwargs['tag']

        level = 'info'
        if 'level' in kwargs.keys():
            level = kwargs['level']

        notify_user = False
        if 'notify_user' in kwargs.keys():
            notify_user = kwargs['notify_user']

        item = None
        if 'item' in kwargs.keys():
            item = kwargs['item']

        if isinstance(level, str):
            if level.lower() == 'error':
                level = Qgis.Critical
            elif level.lower() == 'warning':
                level = Qgis.Warning
            else:
                level = Qgis.Info

        if item is not None:
            if isinstance(item, xml.etree.ElementTree.Element):
                item_str = ElementTree.tostring(item).decode('utf-8') \
                    .replace('<', '[').replace('>', ']')
            else:
                item_str = str(item)
            msg = f'{msg}: {item_str}'

        if not isinstance(msg, str):
            msg = str(msg)

        msg = msg.replace('<', '!').replace('>', '!')
        msg_tr = self.tr(msg)

        QgsMessageLog.logMessage(msg_tr, tag, level, notify_user)

    def get_creds(self):

        # self.post_message(f"conf_file: {self.conf_file}")

        # lines = []
        # if os.path.exists(self.conf_file):
        #     in_f = open(self.conf_file)
        #     lines = in_f.readlines()
        #     in_f.close()
        #
        # settings = {}
        # for ln in lines:
        #     item = ln.split(' = ')
        #     if len(item) == 2:
        #         key, value = item
        #         settings[key.strip('\n')] = value.strip('\n')

        settings = {}
        settings['username'] = self.conf_util.get('Credentials', 'username')
        settings['password'] = base64.b64decode(
            self.conf_util.get('Credentials', 'password')).decode("utf-8")

        # self.post_message(f"Settings: {settings}")

        self.save_setting(settings)

    def save_creds(self, username, password):
#         out_str = f'''username = {username}
# password = {password}'''
#
#         with open(self.conf_file, 'w') as conf_f:
#             conf_f.write(out_str)

        pass_enc = base64.b64encode(password.encode("utf-8")).decode("utf-8")
        self.conf_util.set('Credentials', 'username', username)
        self.conf_util.set('Credentials', 'password', pass_enc)

        self.conf_util.write()

    def get_setting(self, key):
        """Gets a setting from the project settings.

        :param key: The key of the project setting.
        :type key: string
        """

        # proj = QgsProject.instance()

        val, _ = self.proj.readEntry("Eodms", key, "")

        # self.post_message(f"Getting setting {key}: {val}")

        return val

    def get_selection(self):

        layer = self.iface.activeLayer()

        # self.lstImages.clear()

        features = []
        if layer is not None and not isinstance(layer, QgsRasterLayer):

            field_index = layer.fields().indexFromName('RECORD_ID')

            if field_index > -1:
                features = layer.selectedFeatures()

        return features

    def save_setting(self, in_dict):
        """Saves a dictionary of settings to the project settings.

        :param in_dict: A dictionary containing settings.
        :type in_dict: dict
        """

        # proj = QgsProject.instance()

        for k, v in in_dict.items():
            # self.post_message(f"Saving setting {k}: {v}")
            self.proj.writeEntry("Eodms", k, v)

    def apply_settings(self):
        self.username = self.get_setting('username')
        self.password = self.get_setting('password')
        self.attempts = self.get_setting('attempts')
        # self.log_path = self.get_setting('log')
        self.query_timeout = self.get_setting('query_timeout')
        self.order_timeout = self.get_setting('order_timeout')

        self.rapi.set_attempts(self.attempts)
        self.rapi.set_query_timeout(self.query_timeout)
        self.rapi.set_order_timeout(self.order_timeout)

        self.save_creds(self.username, self.password)

    def set_rapi(self):

        self.username = self.get_setting('username')
        self.password = self.get_setting('password')

        self.rapi = EODMSRAPI(self.username, self.password)

    def add_action(self, action_name, icon_path, text, callback,
                   enabled_flag=True, add_to_menu=True, add_to_toolbar=True,
                   status_tip=None, whats_this=None, parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            # self.iface.addToolBarIcon(action)
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToWebMenu(self.menu, action)

        self.actions[action_name] = action

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = self.settings_path
        self.add_action('settings', icon_path, text=self.tr(u'EODMS Settings'),
                        callback=self.open_settings,
                        parent=self.iface.mainWindow())

        icon_path = self.search_path
        self.add_action('search', icon_path, text=self.tr(u'EODMS Search'),
                        callback=self.open_search,
                        parent=self.iface.mainWindow())

        icon_path = self.thumbnail_path
        self.add_action('thumbnail', icon_path, text=self.tr(u'Show Thumbnails'),
                        callback=self.show_thumbnails,
                        parent=self.iface.mainWindow())

        icon_path = self.order_path
        self.add_action('order', icon_path, text=self.tr(u'EODMS Order'),
                        callback=self.open_order,
                        parent=self.iface.mainWindow())

        icon_path = self.download_path
        self.add_action('download', icon_path, text=self.tr(u'EODMS Download'),
                        callback=self.open_download,
                        parent=self.iface.mainWindow())

        self.iface.mainWindow().findChild(QToolBar, 'EODMS_TB').setVisible(True)

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions.values():
            self.iface.removePluginWebMenu(self.tr(u'&EODMS'), action)
            # self.iface.removeToolBarIcon(action)
        del self.toolbar

    def set_windowPosition(self, dialog):

        # Set the Start Roll Dialog
        main_window = self.iface.mainWindow()
        canvas = self.iface.mapCanvas()

        mapcanvas_upperleft = canvas.mapToGlobal(QPoint(0, 0))

        px = mapcanvas_upperleft.x()
        py = mapcanvas_upperleft.y()
        offset_y = -100
        offset_x = 100

        dw = dialog.width()
        dh = dialog.height()

        new_x = px + offset_x
        new_y = py + offset_y

        dialog.setGeometry(new_x, new_y, dw, dh)

    def categorize_layer(self, lyr):

        fname = lyr.fields().indexFromName('COLLECTION_ID')

        unique_values = lyr.uniqueValues(fname)

        print(f"unique_values: {unique_values}")

        categories = []

        for unique_value in unique_values:
            symbol = QgsSymbol.defaultSymbol(lyr.geometryType())

            print(f"symbol: {symbol}")

            r = random.randint(0, 255)
            g = random.randint(0, 255)
            b = random.randint(0, 255)

            print(f"{r}, {g}, {b}")

            fill_colour = QColor(r, g, b, 20)
            stroke_colour = QColor(r, g, b)

            # layer_style = {}
            # layer_style['color'] = f'{r} {g} {b} 63'
            # layer_style['outline'] = f'{r} {g} {b}'
            symb_lyr = QgsSimpleFillSymbolLayer.create()
            symb_lyr.setFillColor(fill_colour)
            symb_lyr.setStrokeColor(stroke_colour)

            if symb_lyr is not None:
                symbol.changeSymbolLayer(0, symb_lyr)

            category = QgsRendererCategory(unique_value, symbol,
                                           str(unique_value))
            categories.append(category)

        renderer = QgsCategorizedSymbolRenderer('COLLECTION_ID', categories)

        # assign the created renderer to the layer
        if renderer is not None:
            lyr.setRenderer(renderer)

        lyr.triggerRepaint()

    def display_results(self):

        layer = QgsVectorLayer('Polygon?crs=epsg:4326', 'EODMS RAPI Results',
                               'memory')

        if self.rapi_results is None or len(self.rapi_results) == 0:
            # msgBox = QMessageBox()
            # msgBox.setIcon(QMessageBox.Warning)
            msg = self.rapi.get_err_msg()
            if msg is None:
                msg = self.rapi.get_msg()
            full_msg = f"Could not get any results due to\n'{msg}'"
            # msgBox.setText()
            # msgBox.setWindowTitle("No EODMS Results")
            # msgBox.setStandardButtons(QMessageBox.Ok)
            # returnValue = msgBox.exec()
            self.show_message(full_msg, "No EODMS Results", QMessageBox.Warning)
            return None

        # Add fields from properties
        fields = []
        self.post_message(f"Number of results: "
                          f"{len(self.rapi_results['features'])}",
                          tag=MESSAGE_CATEGORY)
        for r in self.rapi_results['features']:
            props = list(r['properties'].keys())
            fields += props
            fields = (list(set(fields)))

        # Put RECORD_ID and COLLECTION_ID at the start of list
        fields.insert(0, fields.pop(fields.index('COLLECTION_ID')))
        fields.insert(0, fields.pop(fields.index('RECORD_ID')))

        pr = layer.dataProvider()
        for field in fields:
            if field == 'GEOMETRY':
                continue
            pr.addAttributes([QgsField(field, QVariant.String)])
        layer.updateFields()

        for res in self.rapi_results['features']:
            coords = res['geometry']

            coords_str = json.dumps(coords)
            geom = ogr.CreateGeometryFromJson(coords_str)
            geom = QgsGeometry.fromWkt(geom.ExportToWkt())

            elem = QgsFeature(layer.fields())
            elem.setGeometry(geom)
            for k, v in res['properties'].items():
                if k == 'GEOMETRY':
                    continue
                elem.setAttribute(k, v)
            pr.addFeatures([elem])
            layer.updateExtents()

        QgsProject.instance().addMapLayer(layer)

        self.categorize_layer(layer)

    def open_download(self):

        self.rapi.reset()

        download_action = self.actions['download']
        icon_text = download_action.text()

        download_action.setText(f'{icon_text} - Please wait for window to '
                                'open')
        download_action.setEnabled(False)

        self.download_dlg = DownloadDialog(eodms=self)

        self.set_windowPosition(self.download_dlg)

        self.download_dlg.setModal(True)

        self.download_dlg.show()
        # Run the dialog event loop
        result = self.download_dlg.exec_()

        download_action.setEnabled(True)
        download_action.setText(f'{icon_text}')

        if result:
            self.download_folder = self.download_dlg.txtPath.text()
            tblImages = self.download_dlg.tblImages
            model = tblImages.model()
            sel_indexes = tblImages.selectionModel().selectedRows()

            self.download_items = []
            for idx, sel_idx in enumerate(sel_indexes):
                row = sel_idx.row()
                order_id = model.data(model.index(row, 0))
                ord_item_id = model.data(model.index(row, 1))
                rec_id = model.data(model.index(row, 2))
                coll_id = model.data(model.index(row, 3))

                self.post_message(f"Download #{idx}:")
                self.post_message(f"  order_id: {order_id}")
                self.post_message(f"  ord_item_id: {ord_item_id}")
                self.post_message(f"  rec_id: {rec_id}")
                self.post_message(f"  coll_id: {coll_id}")

                item = {
                    'recordId': rec_id,
                    'collectionId': coll_id,
                    'itemId': ord_item_id,
                    'orderId': order_id
                }
                self.download_items.append(item)

            self.post_message(f"Number of items: {len(self.download_items)}")

            self.post_message("Running RAPI download...")
            download_task = DownloadTask('RAPI download', self)
            QgsApplication.taskManager().addTask(download_task)

            while download_task.status() not in [QgsTask.Complete,
                                              QgsTask.Terminated]:
                QCoreApplication.processEvents()
            while QgsApplication.taskManager().countActiveTasks() > 0:
                QCoreApplication.processEvents()

    def open_order(self):

        self.rapi.reset()

        # Set list of orders from selection
        self.order_lst = self.get_selection()

        if len(self.order_lst) == 0:
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Warning)
            msgBox.setText("Please select the images you would like to order "
                           "from the results layer.")
            msgBox.setWindowTitle("No Selection")
            msgBox.setStandardButtons(QMessageBox.Ok)
            returnValue = msgBox.exec()
            return None

        order_action = self.actions['order']
        icon_text = order_action.text()

        order_action.setText(f'{icon_text} - Please wait for window to '
                                'open')
        order_action.setEnabled(False)

        self.order_dlg = OrderDialog(eodms=self)

        self.set_windowPosition(self.order_dlg)

        self.order_dlg.setModal(True)

        # self.order_dlg.setWindowFlags(Qt.WindowStaysOnTopHint)

        # show the dialog
        self.order_dlg.show()
        # Run the dialog event loop
        result = self.order_dlg.exec_()

        order_action.setEnabled(True)
        order_action.setText(f'{icon_text}')

        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            priority_level = self.order_dlg.cboPriority.currentText()

            self.post_message("Running RAPI order...")
            order_task = OrderTask('RAPI order', self, priority_level)
            QgsApplication.taskManager().addTask(order_task)

            while order_task.status() not in [QgsTask.Complete,
                                               QgsTask.Terminated]:
                QCoreApplication.processEvents()
            while QgsApplication.taskManager().countActiveTasks() > 0:
                QCoreApplication.processEvents()

            # self.rapi_results = order_task.rapi_results

    def open_search(self):
        """Run method that performs all the real work"""

        self.username = self.get_setting('username')
        self.password = self.get_setting('password')

        if self.username is None or self.username == '' or \
                self.password is None or self.password == '':
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Warning)
            msgBox.setText("The EODMS credentials have not been entered. "
                           "Please enter them using the settings button.")
            msgBox.setWindowTitle("No EODMS Credentials")
            msgBox.setStandardButtons(QMessageBox.Ok)
            returnValue = msgBox.exec()
            return None

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        # if self.first_start == True:
        #     self.first_start = False

        self.rapi.reset()

        search_action = self.actions['search']
        icon_text = search_action.text()

        search_action.setText(f'{icon_text} - Please wait for window to open')
        search_action.setEnabled(False)

        self.search_dlg = SearchDialog(eodms=self)

        self.set_windowPosition(self.search_dlg)

        self.search_dlg.setModal(True)

        # self.search_dlg.setWindowFlags(Qt.WindowStaysOnTopHint)

        # show the dialog
        self.search_dlg.show()
        # Run the dialog event loop
        result = self.search_dlg.exec_()

        search_action.setEnabled(True)
        search_action.setText(f'{icon_text}')

        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.

            coll_filters = self.search_dlg.coll_filters
            txtFeatures = self.search_dlg.txtFeatures
            cboGeoOp = self.search_dlg.cboGeoOp
            # objDates = self.search_dlg.date_ranges
            lstDates = self.search_dlg.lstDates
            txtMax = self.search_dlg.txtMax

            # self.post_message(f"objDates: {objDates}")

            search_params = {}
            for coll, filters in coll_filters.items():

                coll_id = self.rapi.get_collection_id(coll)

                features = None
                if not txtFeatures.toPlainText() == '':
                    features = [(cboGeoOp.currentText(),
                                 txtFeatures.toPlainText())]

                dates = []
                for idx in range(lstDates.count()):
                    dt_str = lstDates.item(idx).text()
                    if dt_str.find('-') > -1:
                        start, end = dt_str.split('-')
                        dates.append({'start': start, 'end': end})
                    else:
                        dates.append(dt_str)

                # # if not txtDates.toPlainText() == '':
                # #     dates = txtDates.toPlainText()
                # self.post_message(f"Number of objDates: {len(objDates)}")
                # for d_objs in objDates:
                #     start_dt = d_objs[0].dateTime().toPyDateTime()
                #     end_dt = d_objs[1].dateTime().toPyDateTime()
                #     self.post_message(f"start_dt: {type(start_dt)}")
                #     self.post_message(f"end_dt: {type(end_dt)}")
                #     start = start_dt.strftime('%Y%m%d_%H%M%S')
                #     end = end_dt.strftime('%Y%m%d_%H%M%S')
                #     dates.append({'start': start, 'end': end})

                max_res = None
                if not txtMax.text() == '':
                    max_res = txtMax.text()

                rapi_filters = {}
                for filter in filters:
                    # filter_name = filter[0].text().replace(':', '')
                    filter_name = filter[0].replace(':', '')
                    op = filter[1].currentText()
                    if isinstance(filter[2], QtWidgets.QComboBox):
                        values = [filter[2].currentText()]
                    elif isinstance(filter[2], QtWidgets.QListWidget):
                        values = []
                        for item in filter[2].selectedItems():
                            values.append(item.text())
                    else:
                        values = [filter[2].text()]

                    if len(values) == 0:
                        continue

                    # if filter_name == 'Price':
                    #     values = [True if v.find('Free') > -1 else False
                    #               for v in values]
                    # if filter_name == 'Preview Available':
                    #     values = [True if v.find('Yes') > -1 else None
                    #               for v in values]

                    if not isinstance(values, list):
                        values = [values]

                    values[:] = [item for item in values if item is None
                                 or item != '']

                    if len(values) == 0:
                        continue

                    rapi_filters[filter_name] = (op, values)

                search_params[coll_id] = {'filters': rapi_filters,
                                          'features': features,
                                          'dates': dates,
                                          'max_res': max_res}
            
            self._save_search(search_params)

            self.post_message("Running RAPI search...")
            search_task = SearchTask('RAPI search', self, search_params)
            QgsApplication.taskManager().addTask(search_task)

            while search_task.status() not in [QgsTask.Complete,
                                               QgsTask.Terminated]:
                QCoreApplication.processEvents()
            while QgsApplication.taskManager().countActiveTasks() > 0:
                QCoreApplication.processEvents()

            self.rapi_results = search_task.rapi_results

            self.display_results()

    def open_settings(self):

        set_action = self.actions['settings']
        icon_text = set_action.text()

        set_action.setText(f'{icon_text} - Please wait for window to '
                             'open')
        set_action.setEnabled(False)

        self.settings_dlg = SettingsDialog(eodms=self)

        # self.settings_dlg.setWindowFlags(Qt.WindowStaysOnTopHint)

        self.set_windowPosition(self.settings_dlg)

        self.settings_dlg.setModal(True)

        # Open the dialog
        self.settings_dlg.show()

        result = self.settings_dlg.exec_()
        # See if OK was pressed

        set_action.setEnabled(True)
        set_action.setText(f'{icon_text}')

        if result:
            txtUser = self.settings_dlg.txtUser
            txtPass = self.settings_dlg.txtPass
            txtAttempts = self.settings_dlg.txtAttempts
            # txtLog = self.settings_dlg.txtLog
            txtQTimeout = self.settings_dlg.txtQTimeout
            txtOTimeout = self.settings_dlg.txtOTimeout

            self.username = txtUser.text()
            self.password = txtPass.text()
            self.attempts = txtAttempts.text()
            # self.log_path = txtLog.text()
            self.query_timeout = txtQTimeout.text()
            self.order_timeout = txtOTimeout.text()

            self.save_setting({'attempts': self.attempts})
            # self.save_setting({'log': self.log_path})
            self.save_setting({'query_timeout': self.query_timeout})
            self.save_setting({'order_timeout': self.order_timeout})
            self.save_setting({'username': self.username})
            self.save_setting({'password': self.password})

            self.apply_settings()

            self.set_rapi()
